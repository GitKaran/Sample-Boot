/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.TestDataRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestData extends TableImpl<TestDataRecord> {

    private static final long serialVersionUID = 937620182;

    /**
     * The reference instance of <code>public.test_data</code>
     */
    public static final TestData TEST_DATA = new TestData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestDataRecord> getRecordType() {
        return TestDataRecord.class;
    }

    /**
     * The column <code>public.test_data.value</code>.
     */
    public final TableField<TestDataRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * Create a <code>public.test_data</code> table reference
     */
    public TestData() {
        this(DSL.name("test_data"), null);
    }

    /**
     * Create an aliased <code>public.test_data</code> table reference
     */
    public TestData(String alias) {
        this(DSL.name(alias), TEST_DATA);
    }

    /**
     * Create an aliased <code>public.test_data</code> table reference
     */
    public TestData(Name alias) {
        this(alias, TEST_DATA);
    }

    private TestData(Name alias, Table<TestDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestData(Name alias, Table<TestDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TestData(Table<O> child, ForeignKey<O, TestDataRecord> key) {
        super(child, key, TEST_DATA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST_DATA_PKEY);
    }

    @Override
    public UniqueKey<TestDataRecord> getPrimaryKey() {
        return Keys.TEST_DATA_PKEY;
    }

    @Override
    public List<UniqueKey<TestDataRecord>> getKeys() {
        return Arrays.<UniqueKey<TestDataRecord>>asList(Keys.TEST_DATA_PKEY);
    }

    @Override
    public TestData as(String alias) {
        return new TestData(DSL.name(alias), this);
    }

    @Override
    public TestData as(Name alias) {
        return new TestData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestData rename(String name) {
        return new TestData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestData rename(Name name) {
        return new TestData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
